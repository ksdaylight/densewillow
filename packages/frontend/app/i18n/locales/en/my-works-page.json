{
    "my-work": "My Work",
    "project-overview":"Project Overview",
    "back-end":"Back-End",
    "front-end":"Front-End",
    "all-works":"All",
    "title-hi-ni":"Campus Social Platform using NestJS | Next.js | Vben",
    "description-hi-ni":"This initiative revolves around the development of a sophisticated web application consisting of three distinct projects. The front end, built with Next.js and React, stands as a dynamic user-facing interface. Simultaneously, the admin system, powered by Vben, operates independently to manage the application effectively.  The design aesthetics are further elevated through the use of UI libraries such as Ant Design Mobile, MUI, and Taro UI.\n\nOn the backend, NestJS takes center stage, orchestrating a secure, scalable, and modular architecture. This robust foundation not only fortifies the application against potential security threats but also ensures adaptability to varying scalability requirements.\n\nThe Vben Admin System is implemented to enhance the user experience, enriching the overall look and feel of both the user-facing and admin interfaces. .\n\nAcknowledging the diversity of the user base, the project embraces internationalization (i18n) principles, ensuring inclusive navigation for users with diverse linguistic backgrounds.\n\nThe CI/CD pipeline is meticulously orchestrated through Gitea and Drone, streamlining continuous integration and continuous deployment processes. This ensures a smooth and efficient development lifecycle, facilitating swift iterations and updates across the interconnected projects.\n\nIn terms of the technology stack, the front end leverages Next.js, React, and Vben, while the backend is powered by NestJS. UI libraries such as Ant Design Mobile, MUI, and Taro UI contribute to the rich visual experience. State management is efficiently handled through Redux Toolkit and React-Redux, ensuring a seamless flow of data. Axios and SWR are employed for efficient data fetching, while TypeScript, Sass, ESLint, and Prettier collectively contribute to code quality, maintainability, and a streamlined development experience.\n\nThis project intricately combines cutting-edge technologies across its three interconnected facets, resulting in a web application that not only meets high standards of functionality but also prioritizes user experience and maintainability. The outcome is a modern, responsive, and feature-rich application catering to diverse user needs across its frontend, backend, and server API.",
    "title-hi-ni-backend":"The backend for the 'Campus Social Platform' project.",
    "description-hi-ni-backend":"-Languages: TypeScript: Used TypeScript to write clean and maintainable code with the benefits of static typing, such as early error detection and code completion.\n\n-Frameworks: NestJS: Built scalable and modular server-side applications with NestJS, a powerful framework that leverages TypeScript features and provides a consistent structure and dependency injection system.\n\n-Fastify: Chose Fastify as the web server framework for its high performance and low overhead, ensuring fast and efficient request handling.\n\n-WebSocket: Enabled real-time communication between the server and clients using @nestjs/platform-socket.io, a WebSocket adapter for NestJS.\n\n-Database: MySQL: Created and managed a robust relational database with MySQL, optimizing data storage and retrieval.\n\n-TypeORM: Simplified database interactions with TypeORM, a TypeScript-based ORM that supports MySQL and other databases.\n\n-Authentication: Passport, JWT: Secured the authentication and authorization system with Passport and JWT, using Passport for various authentication strategies and JWT for token-based authorization.\n\n-Job Queue: Bull: Handled background tasks effectively with Bull + Redis, a job queue library that allows asynchronous processing without blocking the main application flow.\n\n-Testing: Jest: Wrote comprehensive unit tests and coverage with Jest, a testing framework that ensures code quality and facilitates continuous integration.\n\n-Logging and Utilities: Log4js, Winston: Implemented logging mechanisms with Log4js and Winston, two popular logging libraries that provide flexible and customizable logging options.",
    "title-hi-ni-frontend":"The frontend for the 'Campus Social Platform' project.",
    "description-hi-ni-frontend":"This project is a front-end application that uses TypeScript as the main programming language, along with various frameworks and libraries to create a beautiful and interactive user interface. The project covers the following aspects:\n\n- Next.js: Used Next.js as the main framework for building the front-end application, taking advantage of its features such as server-side rendering (SSR), file-system routing, and API routes.\n\n- UI Libraries: Used Ant Design Mobile, MUI, Taro UI, and other UI libraries to enhance the design and functionality of the user interface, providing a consistent and responsive layout and components.\n\n- Redux Toolkit: Used Redux Toolkit to manage the state of the application, simplifying the Redux logic and reducing boilerplate code.\n\n- SWR: Used SWR as a React hook for data fetching, caching, and revalidation, improving the data consistency and performance of the application.\n\n- i18next: Used i18next to implement the internationalization and localization of the application, ensuring that the application can support multiple languages and adapt to the user's language preference.\n\n- Jest: Used Jest as the testing framework for writing unit tests and coverage, ensuring the code quality and reliability of the application.\n\n- ESLint, Prettier: Used ESLint and Prettier to enforce code style and formatting rules, improving the code readability and maintainability of the application.",
    "test-account":"Test account:",
    "backend-link": "Admin Panel demonstration link",
    "frontend-link": "Frontend demonstration link",
    "completed-in-Sustaining":"Sustaining Phase",
    "completed-in-Progress":"Development in Progress"
}
