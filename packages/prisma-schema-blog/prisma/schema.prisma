generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client/blog"
}

datasource db {
  provider = "postgresql"
  url      = env("PSQL_DATABASE_BLOG_URL")
}

generator zod {
  provider       = "zod-prisma-types"
  output                           = "../../api-contracts/src/zod" //cause: @nx/enforce-module-boundaries
  prismaClientPath                 = "@prisma/client/blog"
  addInputTypeValidation           = true 
  validateWhereUniqueInput         = true // default is false 
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = true // default is false
  createPartialTypes               = true // default is false
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
}
model User {
  id            String             @id @default(uuid())
  email         String          @unique
  name          String
  provider      String
  activated     Boolean         @default(false)
  avatar        String?
  posts         Post[]
  comments      Comment[]
  LikeComments  UserLikeComments[]
  roles         UsersRoles[]
  permissions   UsersPermissions[]
  likedPosts    UserLikedPosts[]
  accessTokens  AccessToken[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}
model UserLikeComments {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  comment    Comment  @relation(fields: [commentId], references: [id])
  commentId  String 
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, commentId])
}
model UserLikedPosts {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  post    Post  @relation(fields: [postId], references: [id])
  postId  String 
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, postId])
}
model UsersRoles {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  role    Role  @relation(fields: [roleId], references: [id])
  roleId  String 
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, roleId])
}
model UsersPermissions {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  permission     Permission   @relation(fields: [permissionId], references: [id])
  permissionId       String 
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, permissionId])
}
model Role {
  id          String          @id @default(uuid())
  name        String
  label       String?
  description String?
  systemic    Boolean      @default(false)
  permissions RolesPermissions[]
  users       UsersRoles[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String      @id @default(uuid())
  name        String
  label       String?
  description String?
  rule        Json
  roles       RolesPermissions[]
  users       UsersPermissions[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model RolesPermissions {
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     String
  permission     Permission   @relation(fields: [permissionId], references: [id])
  permissionId       String 
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([roleId, permissionId])
}
model Post {
  id            String           @id @default(uuid())
  title         String
  slug          String        @unique
  content       String?
  meta          String
  tags          String[]
  thumbnailId   String?
  thumbnail     MediaEntity? @relation(fields: [thumbnailId], references: [id])
  authorId      String?
  author        User? @relation(fields: [authorId], references: [id])
  likedUsers    UserLikedPosts[]
  comments      Comment[]
  translations  Translation[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Translation {
  id       String    @id @default(uuid())
  language String
  title    String
  content  String?
  meta     String
  postId   String
  post     Post @relation(fields: [postId], references: [id])
}

model MediaEntity {
  id        String      @id @default(uuid())
  file      String
  ext       String
  post      Post[] 

  createdAt DateTime @default(now())
}

model RefreshToken {
  id            String           @id @default(uuid())
  value         String
  expired_at    DateTime
  createdAt     DateTime      @default(now())
  accessTokenId String  @unique
  accessToken   AccessToken @relation(fields: [accessTokenId], references: [id])
}

model AccessToken {
  id          String        @id @default(uuid())
  value       String
  expired_at  DateTime
  createdAt   DateTime   @default(now())
  refreshToken RefreshToken?
  userId      String
  user        User @relation(fields: [userId], references: [id])
}

model Comment {
  id            String       @id @default(uuid())
  belongsToId   String?
  belongsTo     Post?  @relation(fields: [belongsToId], references: [id])
  ownerId       String
  owner         User  @relation(fields: [ownerId], references: [id])
  content       String
  likes         UserLikeComments[]
  repliedToID   String? 
  replyTo       Comment?  @relation("commentsReply", fields: [repliedToID], references: [id])
  replies       Comment[]  @relation("commentsReply")
  chiefComment  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ContactMessage {
  id        String      @id @default(uuid())
  name      String
  email     String
  subject   String 
  message   String
  createdAt DateTime @default(now())
}