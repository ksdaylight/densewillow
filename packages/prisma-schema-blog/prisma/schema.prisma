generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client/blog"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_BLOG_URL")
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  name     String
  provider String
  activated Boolean  @default(false)
  avatar   String?
  posts    Post[]   @relation("AuthorRelation")
  comments Comment[] @relation("CommentOwnerRelation")
  LikeComments Comment[] @relation(fields: [LikeCommentIDs ], references: [id], name: "CommentLikeRelation")
  LikeCommentIDs String[] @db.ObjectId 
  roleIDs        String[] @db.ObjectId
  roles          Role[] @relation(fields: [roleIDs], references: [id])
  permissionIDs  String[] @db.ObjectId
  permissions    Permission[] @relation(fields: [permissionIDs], references: [id])
  likedPostIDs   String[] @db.ObjectId
  likedPosts     Post[]   @relation(fields: [likedPostIDs], references: [id], name: "LikeRelation")
  accessTokens AccessToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Role {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  label         String?      // 可选字段
  description   String?      // 可选字段
  systemic     Boolean      @default(false)
  permissionIDs  String[] @db.ObjectId
  permissions    Permission[] @relation(fields: [permissionIDs], references: [id])
  userIDs        String[] @db.ObjectId
  users          User[] @relation(fields: [userIDs], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
model Permission {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  label         String?      // 可选字段
  description   String?      // 可选字段
  rule          Json         // 存储 rule
  roleIDs    String[] @db.ObjectId
  roles      Role[] @relation(fields: [roleIDs], references: [id])
  userIDs    String[] @db.ObjectId
  users      User[] @relation(fields: [userIDs], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}


model Post {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String  @unique
  content   String?
  meta      String
  tags      String[]
  thumbnailId String? @db.ObjectId
  thumbnail   MediaEntity? @relation(fields: [thumbnailId], references: [id])
  author    User?    @relation(fields: [authorId], references: [id], name: "AuthorRelation")
  authorId  String? @db.ObjectId
  likedByUserIDs String[] @db.ObjectId 
  likedUsers   User[]   @relation(fields: [likedByUserIDs], references: [id], name: "LikeRelation")
  comments Comment[] @relation("CommentPostRelation")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MediaEntity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  file      String
  ext       String
  createdAt DateTime @default(now())
  post      Post[]
}

model RefreshToken {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  value       String
  expired_at  DateTime
  createdAt   DateTime @default(now())
  accessToken AccessToken @relation(fields: [accessTokenId], references: [id])
  accessTokenId  String @unique @db.ObjectId 
}

model AccessToken {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  value           String
  expired_at      DateTime
  createdAt       DateTime @default(now())
  refreshToken    RefreshToken? 
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Comment {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  belongsTo    Post?      @relation(fields: [belongsToId], references: [id], name: "CommentPostRelation" )
  belongsToId  String?    @db.ObjectId
  owner        User      @relation(fields: [ownerId], references: [id], name: "CommentOwnerRelation")
  ownerId      String    @db.ObjectId
  content      String
  likes        User[]    @relation(fields: [likedByUserIDs], references: [id], name:"CommentLikeRelation")
  likedByUserIDs String[] @db.ObjectId 

  repliedToID  String? @db.ObjectId
  replyTo    Comment?   @relation("CommentRepliesRelation", fields: [repliedToID], references: [id], onDelete: NoAction, onUpdate: NoAction )
  replies        Comment[]  @relation("CommentRepliesRelation")

  chiefComment Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}